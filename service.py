from aiogram import types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from database import get_products, get_aromas, get_low_stock_aromas, get_total_quantity, get_aromas_by_category


# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∞—Ä–æ–º–∞—Ç–æ–≤
async def show_admin_products(message: types.Message, offset=0, edit_message_id=None):
    products = await get_products(offset)
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –∏–º–µ–Ω–∏ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä)
    products = sorted(products, key=lambda x: x[1].lower())

    keyboard = []
    for product in products:
        product_id, name, aroma_count = product
        keyboard.append(
            [InlineKeyboardButton(text=f"{name} ({aroma_count} –∞—Ä–æ–º–∞—Ç–æ–≤)", callback_data=f"product_{product_id}")])

    if offset > 0:
        keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"prev_{offset - 10}")])
    if len(products) == 10:
        keyboard.append([InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"next_{offset + 10}")])
    keyboard.append([InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="add_product")])
    keyboard.append([InlineKeyboardButton(text="‚ö†Ô∏è –ê—Ä–æ–º–∞—Ç—ã < 251 –≥—Ä", callback_data="low_stock")])
    keyboard.append([InlineKeyboardButton(text="üìä –ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è", callback_data="inventory")])
    keyboard.append([
        InlineKeyboardButton(text="A –∫–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data="category_A"),
        InlineKeyboardButton(text="B –∫–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data="category_B"),
        InlineKeyboardButton(text="C –∫–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data="category_C")
    ])

    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    text = "–¢–æ–≤–∞—Ä—ã:"
    if edit_message_id:
        await message.bot.edit_message_text(text=text, chat_id=str(message.chat.id), message_id=edit_message_id,
                                            reply_markup=reply_markup)
    else:
        await message.answer(text, reply_markup=reply_markup)


# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞—Ä–æ–º–∞—Ç–æ–≤ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ (–∞–¥–º–∏–Ω)
async def show_admin_aromas(message: types.Message, product_id, offset=0, edit_message_id=None):
    aromas = await get_aromas(product_id, offset)
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∞—Ä–æ–º–∞—Ç—ã –ø–æ –∏–º–µ–Ω–∏ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä)
    aromas = sorted(aromas, key=lambda x: x[1].lower())

    keyboard = []
    for aroma in aromas:
        aroma_id, aroma_name, quantity, category = aroma
        warning = "‚ùóÔ∏è" if quantity < 251 else ""
        keyboard.append([InlineKeyboardButton(text=f"{warning}{aroma_name}{warning} ({quantity} –≥—Ä, {category})",
                                              callback_data=f"aroma_{aroma_id}")])

    if offset > 0:
        keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"aroma_prev_{product_id}_{offset - 10}")])
    if len(aromas) == 10:
        keyboard.append(
            [InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"aroma_next_{product_id}_{offset + 10}")])
    keyboard.append([InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞—Ä–æ–º–∞—Ç", callback_data=f"add_aroma_{product_id}")])
    keyboard.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º", callback_data="main")])

    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    text = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—Ä–æ–º–∞—Ç–∞–º–∏:"
    if edit_message_id:
        await message.bot.edit_message_text(text=text, chat_id=str(message.chat.id), message_id=edit_message_id,
                                            reply_markup=reply_markup)
    else:
        await message.answer(text, reply_markup=reply_markup)


# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞—Ä–æ–º–∞—Ç–æ–≤ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º < 251 –≥—Ä
async def show_low_stock_aromas(message: types.Message, edit_message_id=None):
    aromas = await get_low_stock_aromas()
    if not aromas:
        text = "–ù–µ—Ç –∞—Ä–æ–º–∞—Ç–æ–≤ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –º–µ–Ω–µ–µ 251 –≥—Ä."
    else:
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∞—Ä–æ–º–∞—Ç—ã –ø–æ —Ç–æ–≤–∞—Ä–∞–º
        products = {}
        for product_name, aroma_name, quantity, category in aromas:
            if product_name not in products:
                products[product_name] = []
            products[product_name].append((aroma_name, quantity, category))

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –∏–º–µ–Ω–∏ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä)
        sorted_products = sorted(products.items(), key=lambda x: x[0].lower())

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        text = "‚ö†Ô∏è –ê—Ä–æ–º–∞—Ç—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º < 251 –≥—Ä:\n\n"
        for product_name, aroma_list in sorted_products:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∞—Ä–æ–º–∞—Ç—ã –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä)
            sorted_aromas = sorted(aroma_list, key=lambda x: x[0].lower())
            aroma_texts = [f"  ‚Ä¢ {aroma_name} ({quantity} –≥—Ä, {category})" for aroma_name, quantity, category in
                           sorted_aromas]
            text += f"*{product_name}*:\n" + "\n".join(aroma_texts) + "\n\n"
        text = text.strip()

    keyboard = [[InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º", callback_data="main")]]
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

    if edit_message_id:
        await message.bot.edit_message_text(text=text, chat_id=str(message.chat.id), message_id=edit_message_id,
                                            reply_markup=reply_markup, parse_mode="Markdown")
    else:
        await message.answer(text, reply_markup=reply_markup, parse_mode="Markdown")


# –ü–æ–∫–∞–∑–∞—Ç—å –∞—Ä–æ–º–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (A, B, C)
async def show_aromas_by_category(message: types.Message, category, edit_message_id=None):
    aromas = await get_aromas_by_category(category)
    if not aromas:
        text = f"–ù–µ—Ç –∞—Ä–æ–º–∞—Ç–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}."
    else:
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∞—Ä–æ–º–∞—Ç—ã –ø–æ —Ç–æ–≤–∞—Ä–∞–º
        products = {}
        for product_name, aroma_name, quantity, category in aromas:
            if product_name not in products:
                products[product_name] = []
            products[product_name].append((aroma_name, quantity))

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –∏–º–µ–Ω–∏ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä)
        sorted_products = sorted(products.items(), key=lambda x: x[0].lower())

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        text = f"–ê—Ä–æ–º–∞—Ç—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}:\n\n"
        for product_name, aroma_list in sorted_products:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∞—Ä–æ–º–∞—Ç—ã –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä)
            sorted_aromas = sorted(aroma_list, key=lambda x: x[0].lower())
            aroma_texts = [f"  ‚Ä¢ {aroma_name} ({quantity} –≥—Ä)" for aroma_name, quantity in sorted_aromas]
            text += f"*{product_name}*:\n" + "\n".join(aroma_texts) + "\n\n"
        text = text.strip()

    keyboard = [[InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º", callback_data="main")]]
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

    if edit_message_id:
        await message.bot.edit_message_text(text=text, chat_id=str(message.chat.id), message_id=edit_message_id,
                                            reply_markup=reply_markup, parse_mode="Markdown")
    else:
        await message.answer(text, reply_markup=reply_markup, parse_mode="Markdown")


# –ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–º–º (–∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è)
async def show_inventory(message: types.Message, edit_message_id=None):
    total_quantity = await get_total_quantity()
    text = f"üìä –ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è:\n–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {total_quantity} –≥—Ä"
    keyboard = [[InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º", callback_data="main")]]
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

    if edit_message_id:
        await message.bot.edit_message_text(text=text, chat_id=str(message.chat.id), message_id=edit_message_id,
                                            reply_markup=reply_markup)
    else:
        await message.answer(text, reply_markup=reply_markup)